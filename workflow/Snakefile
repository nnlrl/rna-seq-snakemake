import os
import csv
import yaml
import inspect
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("6.4.1")


include: "scripts/validate_input.py"
validate_config(config)


# report: "report/workflow.rst"


##### setup singularity #####


# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
container: "docker://continuumio/miniconda3"


##### load rules #####


include: "rules/common.smk"



##### target rules #####


rule all:
  input: OUTPUT_FILES


rule help:
  run:
    for key in sorted(targets.keys()):
      print('{}:\n  {}'.format(key, targets[key]['description']))


# Record any existing output files, so that we can detect if they have
# changed.
expected_files = {}
onstart:
    if OUTPUT_FILES:
        for name in OUTPUT_FILES:
            if os.path.exists(name):
                expected_files[name] = os.path.getmtime(name)


# Print generated target files.
onsuccess:
    if OUTPUT_FILES:
        # check if any existing files have been modified
        generated = []
        for name in OUTPUT_FILES:
            if name not in expected_files or os.path.getmtime(name) != expected_files[name]:
                generated.append(name)
        if generated:
            print("The following files have been generated:")
            for name in generated:
                print("  - {}".format(name))



rule translate_sample_sheet_for_report:
    input: SAMPLE_SHEET_FILE
    output: os.path.join(os.getcwd(), "colData.tsv")
    conda: "envs/Rscript.yaml"
    shell: "{RSCRIPT_EXEC} {SCRIPTS_DIR}/translate_sample_sheet_for_report.R {input}"




##### load rules #####


include: "rules/trim.smk"
include: "rules/qc.smk"
include: "rules/align.smk"
include: "rules/bigwig.smk"
include: "rules/diffexp.smk"
